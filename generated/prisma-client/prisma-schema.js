module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.29.2). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateData {
  count: Int!
}

type AggregateGroup {
  count: Int!
}

type AggregateInode {
  count: Int!
}

type AggregateMetadata {
  count: Int!
}

type AggregatePermission {
  count: Int!
}

type AggregatePermissionSet {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Data {
  id: ID!
  data: String!
}

type DataConnection {
  pageInfo: PageInfo!
  edges: [DataEdge]!
  aggregate: AggregateData!
}

input DataCreateInput {
  data: String!
}

input DataCreateManyInput {
  create: [DataCreateInput!]
  connect: [DataWhereUniqueInput!]
}

type DataEdge {
  node: Data!
  cursor: String!
}

enum DataOrderByInput {
  id_ASC
  id_DESC
  data_ASC
  data_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type DataPreviousValues {
  id: ID!
  data: String!
}

input DataScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  data: String
  data_not: String
  data_in: [String!]
  data_not_in: [String!]
  data_lt: String
  data_lte: String
  data_gt: String
  data_gte: String
  data_contains: String
  data_not_contains: String
  data_starts_with: String
  data_not_starts_with: String
  data_ends_with: String
  data_not_ends_with: String
  AND: [DataScalarWhereInput!]
  OR: [DataScalarWhereInput!]
  NOT: [DataScalarWhereInput!]
}

type DataSubscriptionPayload {
  mutation: MutationType!
  node: Data
  updatedFields: [String!]
  previousValues: DataPreviousValues
}

input DataSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: DataWhereInput
  AND: [DataSubscriptionWhereInput!]
  OR: [DataSubscriptionWhereInput!]
  NOT: [DataSubscriptionWhereInput!]
}

input DataUpdateDataInput {
  data: String
}

input DataUpdateInput {
  data: String
}

input DataUpdateManyDataInput {
  data: String
}

input DataUpdateManyInput {
  create: [DataCreateInput!]
  update: [DataUpdateWithWhereUniqueNestedInput!]
  upsert: [DataUpsertWithWhereUniqueNestedInput!]
  delete: [DataWhereUniqueInput!]
  connect: [DataWhereUniqueInput!]
  set: [DataWhereUniqueInput!]
  disconnect: [DataWhereUniqueInput!]
  deleteMany: [DataScalarWhereInput!]
  updateMany: [DataUpdateManyWithWhereNestedInput!]
}

input DataUpdateManyMutationInput {
  data: String
}

input DataUpdateManyWithWhereNestedInput {
  where: DataScalarWhereInput!
  data: DataUpdateManyDataInput!
}

input DataUpdateWithWhereUniqueNestedInput {
  where: DataWhereUniqueInput!
  data: DataUpdateDataInput!
}

input DataUpsertWithWhereUniqueNestedInput {
  where: DataWhereUniqueInput!
  update: DataUpdateDataInput!
  create: DataCreateInput!
}

input DataWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  data: String
  data_not: String
  data_in: [String!]
  data_not_in: [String!]
  data_lt: String
  data_lte: String
  data_gt: String
  data_gte: String
  data_contains: String
  data_not_contains: String
  data_starts_with: String
  data_not_starts_with: String
  data_ends_with: String
  data_not_ends_with: String
  AND: [DataWhereInput!]
  OR: [DataWhereInput!]
  NOT: [DataWhereInput!]
}

input DataWhereUniqueInput {
  id: ID
}

type Group {
  id: ID!
  name: String!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
}

type GroupConnection {
  pageInfo: PageInfo!
  edges: [GroupEdge]!
  aggregate: AggregateGroup!
}

input GroupCreateInput {
  name: String!
  users: UserCreateManyInput
}

input GroupCreateOneInput {
  create: GroupCreateInput
  connect: GroupWhereUniqueInput
}

type GroupEdge {
  node: Group!
  cursor: String!
}

enum GroupOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type GroupPreviousValues {
  id: ID!
  name: String!
}

type GroupSubscriptionPayload {
  mutation: MutationType!
  node: Group
  updatedFields: [String!]
  previousValues: GroupPreviousValues
}

input GroupSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: GroupWhereInput
  AND: [GroupSubscriptionWhereInput!]
  OR: [GroupSubscriptionWhereInput!]
  NOT: [GroupSubscriptionWhereInput!]
}

input GroupUpdateDataInput {
  name: String
  users: UserUpdateManyInput
}

input GroupUpdateInput {
  name: String
  users: UserUpdateManyInput
}

input GroupUpdateManyMutationInput {
  name: String
}

input GroupUpdateOneRequiredInput {
  create: GroupCreateInput
  update: GroupUpdateDataInput
  upsert: GroupUpsertNestedInput
  connect: GroupWhereUniqueInput
}

input GroupUpsertNestedInput {
  update: GroupUpdateDataInput!
  create: GroupCreateInput!
}

input GroupWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  users_every: UserWhereInput
  users_some: UserWhereInput
  users_none: UserWhereInput
  AND: [GroupWhereInput!]
  OR: [GroupWhereInput!]
  NOT: [GroupWhereInput!]
}

input GroupWhereUniqueInput {
  id: ID
  name: String
}

type Inode {
  id: ID!
  name: String!
  metadata: Metadata!
}

type InodeConnection {
  pageInfo: PageInfo!
  edges: [InodeEdge]!
  aggregate: AggregateInode!
}

input InodeCreateInput {
  name: String!
  metadata: MetadataCreateOneInput!
}

type InodeEdge {
  node: Inode!
  cursor: String!
}

enum InodeOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type InodePreviousValues {
  id: ID!
  name: String!
}

type InodeSubscriptionPayload {
  mutation: MutationType!
  node: Inode
  updatedFields: [String!]
  previousValues: InodePreviousValues
}

input InodeSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: InodeWhereInput
  AND: [InodeSubscriptionWhereInput!]
  OR: [InodeSubscriptionWhereInput!]
  NOT: [InodeSubscriptionWhereInput!]
}

input InodeUpdateInput {
  name: String
  metadata: MetadataUpdateOneRequiredInput
}

input InodeUpdateManyMutationInput {
  name: String
}

input InodeWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  metadata: MetadataWhereInput
  AND: [InodeWhereInput!]
  OR: [InodeWhereInput!]
  NOT: [InodeWhereInput!]
}

input InodeWhereUniqueInput {
  id: ID
}

scalar Long

type Metadata {
  id: ID!
  owner: User!
  group: Group!
  permissions: Permission!
  type: NodeType!
  data(where: DataWhereInput, orderBy: DataOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Data!]
  parent: String
}

type MetadataConnection {
  pageInfo: PageInfo!
  edges: [MetadataEdge]!
  aggregate: AggregateMetadata!
}

input MetadataCreateInput {
  owner: UserCreateOneInput!
  group: GroupCreateOneInput!
  permissions: PermissionCreateOneInput!
  type: NodeType!
  data: DataCreateManyInput
  parent: String
}

input MetadataCreateOneInput {
  create: MetadataCreateInput
  connect: MetadataWhereUniqueInput
}

type MetadataEdge {
  node: Metadata!
  cursor: String!
}

enum MetadataOrderByInput {
  id_ASC
  id_DESC
  type_ASC
  type_DESC
  parent_ASC
  parent_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type MetadataPreviousValues {
  id: ID!
  type: NodeType!
  parent: String
}

type MetadataSubscriptionPayload {
  mutation: MutationType!
  node: Metadata
  updatedFields: [String!]
  previousValues: MetadataPreviousValues
}

input MetadataSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: MetadataWhereInput
  AND: [MetadataSubscriptionWhereInput!]
  OR: [MetadataSubscriptionWhereInput!]
  NOT: [MetadataSubscriptionWhereInput!]
}

input MetadataUpdateDataInput {
  owner: UserUpdateOneRequiredInput
  group: GroupUpdateOneRequiredInput
  permissions: PermissionUpdateOneRequiredInput
  type: NodeType
  data: DataUpdateManyInput
  parent: String
}

input MetadataUpdateInput {
  owner: UserUpdateOneRequiredInput
  group: GroupUpdateOneRequiredInput
  permissions: PermissionUpdateOneRequiredInput
  type: NodeType
  data: DataUpdateManyInput
  parent: String
}

input MetadataUpdateManyMutationInput {
  type: NodeType
  parent: String
}

input MetadataUpdateOneRequiredInput {
  create: MetadataCreateInput
  update: MetadataUpdateDataInput
  upsert: MetadataUpsertNestedInput
  connect: MetadataWhereUniqueInput
}

input MetadataUpsertNestedInput {
  update: MetadataUpdateDataInput!
  create: MetadataCreateInput!
}

input MetadataWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  owner: UserWhereInput
  group: GroupWhereInput
  permissions: PermissionWhereInput
  type: NodeType
  type_not: NodeType
  type_in: [NodeType!]
  type_not_in: [NodeType!]
  data_every: DataWhereInput
  data_some: DataWhereInput
  data_none: DataWhereInput
  parent: String
  parent_not: String
  parent_in: [String!]
  parent_not_in: [String!]
  parent_lt: String
  parent_lte: String
  parent_gt: String
  parent_gte: String
  parent_contains: String
  parent_not_contains: String
  parent_starts_with: String
  parent_not_starts_with: String
  parent_ends_with: String
  parent_not_ends_with: String
  AND: [MetadataWhereInput!]
  OR: [MetadataWhereInput!]
  NOT: [MetadataWhereInput!]
}

input MetadataWhereUniqueInput {
  id: ID
}

type Mutation {
  createData(data: DataCreateInput!): Data!
  updateData(data: DataUpdateInput!, where: DataWhereUniqueInput!): Data
  updateManyDatas(data: DataUpdateManyMutationInput!, where: DataWhereInput): BatchPayload!
  upsertData(where: DataWhereUniqueInput!, create: DataCreateInput!, update: DataUpdateInput!): Data!
  deleteData(where: DataWhereUniqueInput!): Data
  deleteManyDatas(where: DataWhereInput): BatchPayload!
  createGroup(data: GroupCreateInput!): Group!
  updateGroup(data: GroupUpdateInput!, where: GroupWhereUniqueInput!): Group
  updateManyGroups(data: GroupUpdateManyMutationInput!, where: GroupWhereInput): BatchPayload!
  upsertGroup(where: GroupWhereUniqueInput!, create: GroupCreateInput!, update: GroupUpdateInput!): Group!
  deleteGroup(where: GroupWhereUniqueInput!): Group
  deleteManyGroups(where: GroupWhereInput): BatchPayload!
  createInode(data: InodeCreateInput!): Inode!
  updateInode(data: InodeUpdateInput!, where: InodeWhereUniqueInput!): Inode
  updateManyInodes(data: InodeUpdateManyMutationInput!, where: InodeWhereInput): BatchPayload!
  upsertInode(where: InodeWhereUniqueInput!, create: InodeCreateInput!, update: InodeUpdateInput!): Inode!
  deleteInode(where: InodeWhereUniqueInput!): Inode
  deleteManyInodes(where: InodeWhereInput): BatchPayload!
  createMetadata(data: MetadataCreateInput!): Metadata!
  updateMetadata(data: MetadataUpdateInput!, where: MetadataWhereUniqueInput!): Metadata
  updateManyMetadatas(data: MetadataUpdateManyMutationInput!, where: MetadataWhereInput): BatchPayload!
  upsertMetadata(where: MetadataWhereUniqueInput!, create: MetadataCreateInput!, update: MetadataUpdateInput!): Metadata!
  deleteMetadata(where: MetadataWhereUniqueInput!): Metadata
  deleteManyMetadatas(where: MetadataWhereInput): BatchPayload!
  createPermission(data: PermissionCreateInput!): Permission!
  updatePermission(data: PermissionUpdateInput!, where: PermissionWhereUniqueInput!): Permission
  upsertPermission(where: PermissionWhereUniqueInput!, create: PermissionCreateInput!, update: PermissionUpdateInput!): Permission!
  deletePermission(where: PermissionWhereUniqueInput!): Permission
  deleteManyPermissions(where: PermissionWhereInput): BatchPayload!
  createPermissionSet(data: PermissionSetCreateInput!): PermissionSet!
  updatePermissionSet(data: PermissionSetUpdateInput!, where: PermissionSetWhereUniqueInput!): PermissionSet
  updateManyPermissionSets(data: PermissionSetUpdateManyMutationInput!, where: PermissionSetWhereInput): BatchPayload!
  upsertPermissionSet(where: PermissionSetWhereUniqueInput!, create: PermissionSetCreateInput!, update: PermissionSetUpdateInput!): PermissionSet!
  deletePermissionSet(where: PermissionSetWhereUniqueInput!): PermissionSet
  deleteManyPermissionSets(where: PermissionSetWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

enum NodeType {
  FILE
  DIRECTORY
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Permission {
  id: ID!
  user: PermissionSet!
  group: PermissionSet!
  other: PermissionSet!
}

type PermissionConnection {
  pageInfo: PageInfo!
  edges: [PermissionEdge]!
  aggregate: AggregatePermission!
}

input PermissionCreateInput {
  user: PermissionSetCreateOneInput!
  group: PermissionSetCreateOneInput!
  other: PermissionSetCreateOneInput!
}

input PermissionCreateOneInput {
  create: PermissionCreateInput
  connect: PermissionWhereUniqueInput
}

type PermissionEdge {
  node: Permission!
  cursor: String!
}

enum PermissionOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type PermissionPreviousValues {
  id: ID!
}

type PermissionSet {
  id: ID!
  read: Boolean!
  write: Boolean!
  execute: Boolean!
}

type PermissionSetConnection {
  pageInfo: PageInfo!
  edges: [PermissionSetEdge]!
  aggregate: AggregatePermissionSet!
}

input PermissionSetCreateInput {
  read: Boolean
  write: Boolean
  execute: Boolean
}

input PermissionSetCreateOneInput {
  create: PermissionSetCreateInput
  connect: PermissionSetWhereUniqueInput
}

type PermissionSetEdge {
  node: PermissionSet!
  cursor: String!
}

enum PermissionSetOrderByInput {
  id_ASC
  id_DESC
  read_ASC
  read_DESC
  write_ASC
  write_DESC
  execute_ASC
  execute_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type PermissionSetPreviousValues {
  id: ID!
  read: Boolean!
  write: Boolean!
  execute: Boolean!
}

type PermissionSetSubscriptionPayload {
  mutation: MutationType!
  node: PermissionSet
  updatedFields: [String!]
  previousValues: PermissionSetPreviousValues
}

input PermissionSetSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PermissionSetWhereInput
  AND: [PermissionSetSubscriptionWhereInput!]
  OR: [PermissionSetSubscriptionWhereInput!]
  NOT: [PermissionSetSubscriptionWhereInput!]
}

input PermissionSetUpdateDataInput {
  read: Boolean
  write: Boolean
  execute: Boolean
}

input PermissionSetUpdateInput {
  read: Boolean
  write: Boolean
  execute: Boolean
}

input PermissionSetUpdateManyMutationInput {
  read: Boolean
  write: Boolean
  execute: Boolean
}

input PermissionSetUpdateOneRequiredInput {
  create: PermissionSetCreateInput
  update: PermissionSetUpdateDataInput
  upsert: PermissionSetUpsertNestedInput
  connect: PermissionSetWhereUniqueInput
}

input PermissionSetUpsertNestedInput {
  update: PermissionSetUpdateDataInput!
  create: PermissionSetCreateInput!
}

input PermissionSetWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  read: Boolean
  read_not: Boolean
  write: Boolean
  write_not: Boolean
  execute: Boolean
  execute_not: Boolean
  AND: [PermissionSetWhereInput!]
  OR: [PermissionSetWhereInput!]
  NOT: [PermissionSetWhereInput!]
}

input PermissionSetWhereUniqueInput {
  id: ID
}

type PermissionSubscriptionPayload {
  mutation: MutationType!
  node: Permission
  updatedFields: [String!]
  previousValues: PermissionPreviousValues
}

input PermissionSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PermissionWhereInput
  AND: [PermissionSubscriptionWhereInput!]
  OR: [PermissionSubscriptionWhereInput!]
  NOT: [PermissionSubscriptionWhereInput!]
}

input PermissionUpdateDataInput {
  user: PermissionSetUpdateOneRequiredInput
  group: PermissionSetUpdateOneRequiredInput
  other: PermissionSetUpdateOneRequiredInput
}

input PermissionUpdateInput {
  user: PermissionSetUpdateOneRequiredInput
  group: PermissionSetUpdateOneRequiredInput
  other: PermissionSetUpdateOneRequiredInput
}

input PermissionUpdateOneRequiredInput {
  create: PermissionCreateInput
  update: PermissionUpdateDataInput
  upsert: PermissionUpsertNestedInput
  connect: PermissionWhereUniqueInput
}

input PermissionUpsertNestedInput {
  update: PermissionUpdateDataInput!
  create: PermissionCreateInput!
}

input PermissionWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  user: PermissionSetWhereInput
  group: PermissionSetWhereInput
  other: PermissionSetWhereInput
  AND: [PermissionWhereInput!]
  OR: [PermissionWhereInput!]
  NOT: [PermissionWhereInput!]
}

input PermissionWhereUniqueInput {
  id: ID
}

type Query {
  data(where: DataWhereUniqueInput!): Data
  datas(where: DataWhereInput, orderBy: DataOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Data]!
  datasConnection(where: DataWhereInput, orderBy: DataOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DataConnection!
  group(where: GroupWhereUniqueInput!): Group
  groups(where: GroupWhereInput, orderBy: GroupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Group]!
  groupsConnection(where: GroupWhereInput, orderBy: GroupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): GroupConnection!
  inode(where: InodeWhereUniqueInput!): Inode
  inodes(where: InodeWhereInput, orderBy: InodeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Inode]!
  inodesConnection(where: InodeWhereInput, orderBy: InodeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): InodeConnection!
  metadata(where: MetadataWhereUniqueInput!): Metadata
  metadatas(where: MetadataWhereInput, orderBy: MetadataOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Metadata]!
  metadatasConnection(where: MetadataWhereInput, orderBy: MetadataOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MetadataConnection!
  permission(where: PermissionWhereUniqueInput!): Permission
  permissions(where: PermissionWhereInput, orderBy: PermissionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Permission]!
  permissionsConnection(where: PermissionWhereInput, orderBy: PermissionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PermissionConnection!
  permissionSet(where: PermissionSetWhereUniqueInput!): PermissionSet
  permissionSets(where: PermissionSetWhereInput, orderBy: PermissionSetOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PermissionSet]!
  permissionSetsConnection(where: PermissionSetWhereInput, orderBy: PermissionSetOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PermissionSetConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Subscription {
  data(where: DataSubscriptionWhereInput): DataSubscriptionPayload
  group(where: GroupSubscriptionWhereInput): GroupSubscriptionPayload
  inode(where: InodeSubscriptionWhereInput): InodeSubscriptionPayload
  metadata(where: MetadataSubscriptionWhereInput): MetadataSubscriptionPayload
  permission(where: PermissionSubscriptionWhereInput): PermissionSubscriptionPayload
  permissionSet(where: PermissionSetSubscriptionWhereInput): PermissionSetSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  name: String!
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  name: String!
}

input UserCreateManyInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
}

input UserScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
  NOT: [UserScalarWhereInput!]
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateDataInput {
  name: String
}

input UserUpdateInput {
  name: String
}

input UserUpdateManyDataInput {
  name: String
}

input UserUpdateManyInput {
  create: [UserCreateInput!]
  update: [UserUpdateWithWhereUniqueNestedInput!]
  upsert: [UserUpsertWithWhereUniqueNestedInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyMutationInput {
  name: String
}

input UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyDataInput!
}

input UserUpdateOneRequiredInput {
  create: UserCreateInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
  connect: UserWhereUniqueInput
}

input UserUpdateWithWhereUniqueNestedInput {
  where: UserWhereUniqueInput!
  data: UserUpdateDataInput!
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithWhereUniqueNestedInput {
  where: UserWhereUniqueInput!
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  name: String
}
`
      }
    